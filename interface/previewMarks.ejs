<html>
  <head>
    <title>Marks Page</title>
    <link rel="stylesheet" type="text/css" href="style/home.css" />
  </head>
  <script src="/socket.io/socket.io.js"></script>
  <script src="openpgp/dist/openpgp.min.js"></script>
  <body>
    <p > <h1 class="page">Marks Page</h1> </p>
    <div class="container" style="background-color: #808b6f; " >
      <div class="form-input">
        <% if (Marks.length > 0) { %>
          <% for (let mark of Marks) { %>
            <div style="display: flex; justify-content: space-between;">
        <label > Subject </label>
        <span id = "Subject" style="max-width: 6rem; min-width: 6rem;"> <%=mark.subject %> </span>
        <label> Pass percent </label>
        <span id = "Pass percent" style="max-width: 6rem; min-width: 6rem;"> <%=mark.passPercent %> </span>
      </div>
        <hr style="margin: auto;">
        <!-- A horizontal line with 50% width and left alignment -->
        <hr style="width:50%;text-align:left;margin-left:0; margin:auto;">
         <!-- A horizontal line with 2px height and gray color -->
         <hr style=" height:2px;border-width:0;color:gray;background-color:gray">
            <% } %>
            <% } %>
        <a href="/" class="form-input" style="color: black ;  text-decoration: none; margin-top: -10px; margin-bottom: 10px; margin-left: -3px;">Back to Home </a> 
      </div>
 
    </div>

    <script type="module">
        var keys = {publicKey:'', privatKey:'',serverKey:''};
        var  passphrase = 'ZRquaXCjT4ibThjNtz9gh/03fyxoBrIWOSNAc7dWh+uCepWBkZJvtrwiXtEj2EhR';
        var user_id = "<%= id %>";
        console.log('user id is ' , user_id);
     const generateKeyPair = async (keys) => {
     const { publicKey, privateKey } = await openpgp.generateKey({
      curve: 'ed25519',
      userIDs: [
       {
        id: user_id
       },
          ],
    passphrase: 'ZRquaXCjT4ibThjNtz9gh/03fyxoBrIWOSNAc7dWh+uCepWBkZJvtrwiXtEj2EhR',
  });
  //console.log(publicKey, privateKey);
  keys.publicKey = publicKey;
  keys.privatKey = privateKey;
  return ;

};
        var socket = io();
        socket.on('handshake',  (payload)=> {
           keys.serverKey = payload.server_key;
           socket.emit('handshake2',{
            user_id: user_id
           })
        socket.on('join',async (payload)=>{
          console.log('generating keys');
            await generateKeyPair(keys);
          console.log('emitting keys');
            socket.emit('sendkey',{
            ClientPublicKey:keys.publicKey
           })

        })   
        });

        socket.on('confirm keys',async (message) => {
          const publicKey = await openpgp.readKey({
        armoredKey: keys.serverKey,
      });
      

      const privateKey = await openpgp.decryptKey({
        privateKey: await openpgp.readPrivateKey({
          armoredKey: keys.privatKey,
        }),
        passphrase,
      });
    
            const msg = await openpgp.readMessage({
            armoredMessage:message.message // parse armored message
                });
                
          openpgp.decrypt({
          message: msg,
          decryptionKeys: privateKey
        }).then(plaintext => {
         // get the plain text
         const text = plaintext.data;
        console.log('decrypted message: ' + text);
           })

          });

      </script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"></script>
  </body>
</html>
