<html>
  <head>
    <title>Dr Home Page</title>
    <link rel="stylesheet" type="text/css" href="style/home.css" />
  </head>
  <script src="/socket.io/socket.io.js"></script>
  <script src="openpgp/dist/openpgp.min.js"></script>
  <body>
    <p > <h1 class="page">Dr Home Page</h1> </p>
      <div class="container"  style="background-color: #808b6f;">
      <div class="form-input">
        <label> User name </label>
        <span> <%=name %> </span>
        <label> User email </label>
        <span> <%=email %> </span>
        <label> User role </label>
        <span> <%=type %> </span>
        <hr style="margin: auto;">
       <!-- A horizontal line with 50% width and left alignment -->
       <hr style="width:50%;text-align:left;margin-left:0; margin:auto;">
        <!-- A horizontal line with 2px height and gray color -->
        <hr style=" height:2px;border-width:0;color:gray;background-color:gray">
        <a href="/addmarks" class="form-input" style="color: black ;  text-decoration: none; margin-top: -10px; margin-bottom: 10px; margin-left: -3px;"> Add Marks </a> 
        <a id="getMarks" class="form-input" style="color: black ;  text-decoration: none; margin-top: -6px; margin-bottom: 10px; margin-left: -3px;"> Get Marks </a> 
        <hr style="margin: auto;">
       <!-- A horizontal line with 50% width and left alignment -->
       <hr style="width:50%;text-align:left;margin-left:0; margin:auto;">
        <!-- A horizontal line with 2px height and gray color -->
        <hr style=" height:2px;border-width:0;color:gray;background-color:gray">
        <a href="/previewMarks" class="form-input" style="color: black ;  text-decoration: none; margin-top: -6px; margin-bottom: 10px; margin-left: -3px;">Preview Additional Info </a> 
        <a id="post-link" href="/logout" class="form-input" style="color: black ;  text-decoration: none; margin-top: -6px; margin-bottom: 10px; margin-left: -3px;">Logout </a> 
      </div>
 
    </div>
    <script type="module">
        var keys = {publicKey:'', privatKey:'',serverKey:''};
        var  passphrase = 'ZRquaXCjT4ibThjNtz9gh/03fyxoBrIWOSNAc7dWh+uCepWBkZJvtrwiXtEj2EhR';
        var user_id = "<%= id %>";
        console.log('user id is ' , user_id);
     const generateKeyPair = async (keys) => {
     const { publicKey, privateKey } = await openpgp.generateKey({
      curve: 'ed25519',
      userIDs: [
       {
        id: user_id
       },
          ],
    passphrase: 'ZRquaXCjT4ibThjNtz9gh/03fyxoBrIWOSNAc7dWh+uCepWBkZJvtrwiXtEj2EhR',
  });
  //console.log(publicKey, privateKey);
  keys.publicKey = publicKey;
  keys.privatKey = privateKey;
  return ;

};
        var socket = io();
        socket.on('handshake',  (payload)=> {
           keys.serverKey = payload.server_key;
           socket.emit('handshake2',{
            user_id: user_id
           })
        socket.on('join',async (payload)=>{
          console.log('generating keys');
            await generateKeyPair(keys);
          console.log('emitting keys');
            socket.emit('sendkey',{
            ClientPublicKey:keys.publicKey
           })

        })   
        });

        socket.on('confirm keys',async (message) => {
          const publicKey = await openpgp.readKey({
        armoredKey: keys.serverKey,
      });
      

      const privateKey = await openpgp.decryptKey({
        privateKey: await openpgp.readPrivateKey({
          armoredKey: keys.privatKey,
        }),
        passphrase,
      });
    
            const msg = await openpgp.readMessage({
            armoredMessage:message.message // parse armored message
                });
                
          openpgp.decrypt({
          message: msg,
          decryptionKeys: privateKey
        }).then(plaintext => {
         // get the plain text
         const text = plaintext.data;
        console.log('decrypted message: ' + text);
           })

          });
          // get info request
          var getInfo = document.getElementById("getMarks");
          getInfo.addEventListener("click", async function(event) { 
          event.preventDefault();
          const publicKey = await openpgp.readKey({
          armoredKey: keys.serverKey,
          });
          const responseMessage = await openpgp.createMessage({
            text: JSON.stringify(user_id),
           }); 
           const privateKey = await openpgp.decryptKey({
           privateKey: await openpgp.readPrivateKey({
            armoredKey: keys.privatKey,
           }),
          passphrase,
          });

          const signedMessage = await openpgp.sign({
            message: responseMessage,
            signingKeys:privateKey,
           })
       
           const encrypt = await openpgp.encrypt({
           message: responseMessage,
           encryptionKeys: publicKey,
            });
          socket.emit('demandMarks',{encrypt:encrypt,signedMessage:signedMessage});
          socket.on('reciveMarks',async (EventSourceypt)=>{
            const privateKey = await openpgp.decryptKey({
            privateKey: await openpgp.readPrivateKey({
             armoredKey: keys.privatKey,
            }),
            passphrase,
           });
            const msg = await openpgp.readMessage({
            armoredMessage:EventSourceypt.encrypt // parse armored message
                });
                
          openpgp.decrypt({
          message: msg,
          decryptionKeys: privateKey
        }).then(plaintext => {
          const text = JSON.parse(plaintext.data);
          alert(text.map(obj => JSON.stringify(obj.subject+ " pass percent is  " + obj.passPercent)).join("\n") + " \n signature is true");
           })
          });
          socket.on('dbErrorMarks',async (error)=>{
            const privateKey = await openpgp.decryptKey({
            privateKey: await openpgp.readPrivateKey({
             armoredKey: keys.privatKey,
            }),
            passphrase,
           });
            const msg = await openpgp.readMessage({
            armoredMessage:error.encrypt // parse armored message
                });
                
          openpgp.decrypt({
          message: msg,
          decryptionKeys: privateKey
        }).then(plaintext => {
         // get the plain text
         const text = plaintext.data;
        alert( text);
           })
          });
          });
          
          socket.emit('login', user_id.trim());
          // Listen for 'alert' event to display alerts
         socket.on('alert', (message) => {
         alert(message);
         // Redirect or handle the alert as needed
         });
         socket.on('UnSignError',async (successMsg)=>{
            const privateKey = await openpgp.decryptKey({
            privateKey: await openpgp.readPrivateKey({
             armoredKey: keys.privatKey,
            }),
            passphrase,
           });
            const msg = await openpgp.readMessage({
            armoredMessage:successMsg.encrypt // parse armored message
                });
                
          openpgp.decrypt({
          message: msg,
          decryptionKeys: privateKey
        }).then(plaintext => {
         // get the plain text
         const text = plaintext.data;
        alert( text);
           })
          });

  
      </script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"></script>
      <script>
        // Get the link element
var link = document.getElementById("post-link");

// Add a click event listener
link.addEventListener("click", function(e) {
  // Prevent the default behavior of the link
  e.preventDefault();

  // Use the fetch API to send a POST request to the link's href attribute
  fetch(link.href, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({})
  })
  .then(function(response) {
    if (response.ok) {
      // Success
      //return window.location.href="http://localhost:3000/";
      return window.location.href="https://localhost:3000/";
    } else {
      // Error
      throw new Error(response.statusText);
    }
  })
  .then(function(data) {
    // Handle the data
    console.log(data);
  })
  .catch(function(error) {
    // Handle the error
    console.error(error);
  });
});

      </script>
  </body>
</html>
