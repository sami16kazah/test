
<html>
  <head>
    <title>Add Marks</title>
    <link rel="stylesheet" type="text/css" href="style/login.css" />
    <link rel="stylesheet" type="text/css" href="style/home.css" />
  </head>
  <script src="/socket.io/socket.io.js"></script>
  <script src="openpgp/dist/openpgp.min.js"></script>
  <body>
    
    <p > <h1 class="page">AddInfo Page</h1> </p>
    <div class="container " style="background-color: #808b6f;">
        <div class="form-input">
      <form id="sendInfo"   style="margin: auto; text-align: center;" >
        <input type="number" placeholder="Pass Percent" name="passPercent" id="passPercent" required/>
        <input type="text" placeholder="Subject" name="subject" id="subject" required />
        <button type="submit" class="loginButton">Add Mark</button>
        <% if(error) { %>
        <div><p class="errors"> <%= error %> </p></div>
        <% } %>
      </form>
      <script type="module">
        var keys = {publicKey:'', privatKey:'',serverKey:''};
        var passphrase = 'ZRquaXCjT4ibThjNtz9gh/03fyxoBrIWOSNAc7dWh+uCepWBkZJvtrwiXtEj2EhR';
        var user_id = "<%= id %>";
        console.log('user id is ' , user_id);
        const generateKeyPair = async (keys) => {
           const { publicKey, privateKey } = await openpgp.generateKey({
           curve: 'ed25519',
           userIDs: [
            {
            id: user_id
            },
             ],
           passphrase: 'ZRquaXCjT4ibThjNtz9gh/03fyxoBrIWOSNAc7dWh+uCepWBkZJvtrwiXtEj2EhR',
              });
            //console.log(publicKey, privateKey);
         keys.publicKey = publicKey;
         keys.privatKey = privateKey;
         return ;
                };
        var form = document.getElementById("sendInfo");


        form.addEventListener("submit", async function(event) { 
          event.preventDefault();
        var passPercent = document.getElementById('passPercent').value;
        var subject= document.getElementById('subject').value;

        var formData = {passPercent:passPercent,subject:subject,id:"<%= id %>"};
          var socket = io();
          socket.on('handshake',  (payload)=> {
           keys.serverKey = payload.server_key;
           socket.emit('handshake2',{
            user_id: user_id
           })
        socket.on('join',async (payload)=>{
          console.log('generating keys');
            await generateKeyPair(keys);
          console.log('emitting keys');
            socket.emit('sendkey',{
            ClientPublicKey:keys.publicKey
           })

        })   
        });

        socket.on('confirm keys',async (message) => {
          const publicKey = await openpgp.readKey({
        armoredKey: keys.serverKey,
      });
      

      const privateKey = await openpgp.decryptKey({
        privateKey: await openpgp.readPrivateKey({
          armoredKey: keys.privatKey,
        }),
        passphrase,
      });
    
            const msg = await openpgp.readMessage({
            armoredMessage:message.message // parse armored message
                });
                
          openpgp.decrypt({
          message: msg,
          decryptionKeys: privateKey
        }).then(plaintext => {
         // get the plain text
         const text = plaintext.data;
        console.log('decrypted message: ' + text);
           })
           const responseMessage = await openpgp.createMessage({
            text: JSON.stringify(formData),
           }); 
           const signedMessage = await openpgp.sign({
            message: responseMessage,
            signingKeys:privateKey,
           })
           const encrypt = await openpgp.encrypt({
           message: responseMessage,
           encryptionKeys: publicKey,
            });

            socket.emit('sendMarks',{
            encrypt:encrypt,
            signedMessage:signedMessage
          });

         
          });
       
          socket.on('successMark',async (successMsg)=>{
            const privateKey = await openpgp.decryptKey({
            privateKey: await openpgp.readPrivateKey({
             armoredKey: keys.privatKey,
            }),
            passphrase,
           });
            const msg = await openpgp.readMessage({
            armoredMessage:successMsg.encrypt // parse armored message
                });
                
          openpgp.decrypt({
          message: msg,
          decryptionKeys: privateKey
        }).then(plaintext => {
         // get the plain text
         const text = plaintext.data;
        alert( text);
           })
          });


          socket.on('dbErrorAddMarks',async (error)=>{
            const privateKey = await openpgp.decryptKey({
            privateKey: await openpgp.readPrivateKey({
             armoredKey: keys.privatKey,
            }),
            passphrase,
           });
            const msg = await openpgp.readMessage({
            armoredMessage:error.encrypt // parse armored message
                });
                
          openpgp.decrypt({
          message: msg,
          decryptionKeys: privateKey
        }).then(plaintext => {
         // get the plain text
         const text = plaintext.data;
        alert( text);
           })
          });

          

        });
;
      </script>
     <a href="/" style="color: black ;  text-decoration: none; margin-top: 10px; margin-left: 6px; ">  Back </a> 
    </div>
    </div>
  </body>
</html>
